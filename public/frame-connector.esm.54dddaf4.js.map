{"version":3,"sources":["../node_modules/eth-provider/resolve/index.js","../node_modules/ethereum-provider/index.js","../node_modules/eth-provider/ConnectionManager/index.js","../node_modules/eth-provider/provider/index.js","../node_modules/eth-provider/presets/index.js","../node_modules/eth-provider/connections/injected.js","../node_modules/eth-provider/connections/unavailable.js","../node_modules/eth-provider/parse/index.js","../node_modules/eth-provider/connections/ws.js","../node_modules/eth-provider/connections/http.js","../node_modules/eth-provider/browser.js","../src/index.ts"],"names":["EventEmitter","require","dev","ConnectionManager","constructor","connections","targets","options","connected","status","interval","name","inSetup","connect","index","console","log","connection","length","protocol","location","on","err","listenerCount","emit","warn","message","connectionError","summary","closing","refresh","target","data","payload","toFixed","clearTimeout","connectTimer","setTimeout","close","error","code","id","jsonrpc","send","closed","module","exports","parse","WebSocket","WebSocketConnection","_WebSocket","url","create","Error","socket","e","addEventListener","payloads","forEach","load","Array","isArray","onClose","removeAllListeners","readyState","CONNECTING","_","JSON","stringify","cb","uuid","XHR","HTTPConnection","_XHR","subscriptions","pollId","init","method","params","response","pollSubscriptions","result","subscriptionTimeout","map","p","filter","n","filterStatus","res","statusText","internal","xhr","responded","abort","open","setRequestHeader","timeout","onerror","ontimeout","onreadystatechange","responseText","UserRejectedRequestError","FrameConnector","kwargs","supportedChainIds","invariant","handleNetworkChanged","bind","handleChainChanged","handleAccountsChanged","handleClose","networkId","emitUpdate","provider","chainId","accounts","account","reason","emitDeactivate","activate","ethProvider","enable","then","getProvider","getChainId","getAccount","deactivate","removeListener","AbstractConnector"],"mappings":"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","file":"frame-connector.esm.54dddaf4.js","sourceRoot":"..\\src","sourcesContent":["const getProtocol = location => {\n  if (location === 'injected') return 'injected'\n  if (location.endsWith('.ipc')) return 'ipc'\n  if (location.startsWith('wss://') || location.startsWith('ws://')) return 'ws'\n  if (location.startsWith('https://') || location.startsWith('http://')) return 'http'\n  return ''\n}\n\nmodule.exports = (targets, presets) => {\n  return [].concat(...[].concat(targets).map(provider => {\n    if (presets[provider]) {\n      return presets[provider].map(location => ({ type: provider, location, protocol: getProtocol(location) }))\n    } else {\n      return { type: 'custom', location: provider, protocol: getProtocol(provider) }\n    }\n  })).filter(provider => {\n    if (provider.protocol || provider.type === 'injected') {\n      return true\n    } else {\n      console.log('eth-provider | Invalid provider preset/location: \"' + provider.location + '\"')\n      return false\n    }\n  })\n}\n","const EventEmitter = require('events')\n\nclass EthereumProvider extends EventEmitter {\n  constructor (connection) {\n    super()\n    this.connected = false\n    this.nextId = 0\n    this.promises = {}\n    this.subscriptions = []\n    this.connection = connection\n    this.connection.on('connect', () => this.checkConnection())\n    this.connection.on('close', () => this.emit('close'))\n    this.connection.on('payload', payload => {\n      const { id, method, error, result } = payload\n      if (typeof id !== 'undefined') {\n        if (this.promises[id]) { // Fulfill promise\n          payload.error ? this.promises[id].reject(error) : this.promises[id].resolve(result)\n          delete this.promises[id]\n        }\n      } else if (method && method.indexOf('_subscription') > -1) { // Emit subscription result\n        this.emit(payload.params.subscription, payload.params.result)\n        this.emit(method, payload.params) // Latest EIP-1193\n        this.emit('data', payload) // Backwards Compatibility\n      }\n    })\n    this.on('newListener', (event, listener) => {\n      if (event === 'networkChanged') {\n        if (!this.attemptedNetworkSubscription && this.connected) this.startNetworkSubscription()\n      } else if (event === 'accountsChanged') {\n        if (!this.attemptedAccountsSubscription && this.connected) this.startAccountsSubscription()\n      }\n    })\n  }\n  async checkConnection () {\n    try {\n      this.emit('connect', await this._send('net_version'))\n      this.connected = true\n      if (this.listenerCount('networkChanged') && !this.attemptedNetworkSubscription) this.startNetworkSubscription()\n      if (this.listenerCount('accountsChanged') && !this.attemptedAccountsSubscription) this.startAccountsSubscription()\n    } catch (e) {\n      this.connected = false\n    }\n  }\n  async startNetworkSubscription () {\n    this.attemptedNetworkSubscription = true\n    try {\n      let networkChanged = await this.subscribe('eth_subscribe', 'networkChanged')\n      this.on(networkChanged, netId => this.emit('networkChanged', netId))\n    } catch (e) {\n      console.warn('Unable to subscribe to networkChanged', e)\n    }\n  }\n  async startAccountsSubscription () {\n    this.attemptedAccountsSubscription = true\n    try {\n      let accountsChanged = await this.subscribe('eth_subscribe', 'accountsChanged')\n      this.on(accountsChanged, accounts => this.emit('accountsChanged', accounts))\n    } catch (e) {\n      console.warn('Unable to subscribe to accountsChanged', e)\n    }\n  }\n  enable () {\n    return new Promise((resolve, reject) => {\n      this._send('eth_accounts').then(accounts => {\n        if (accounts.length > 0) {\n          this.accounts = accounts\n          this.coinbase = accounts[0]\n          this.emit('enable')\n          resolve(accounts)\n        } else {\n          const err = new Error('User Denied Full Provider')\n          err.code = 4001\n          reject(err)\n        }\n      }).catch(reject)\n    })\n  }\n  _send (method, params = []) {\n    if (!method || typeof method !== 'string') return new Error('Method is not a valid string.')\n    if (!(params instanceof Array)) return new Error('Params is not a valid array.')\n    const payload = { jsonrpc: '2.0', id: this.nextId++, method, params }\n    const promise = new Promise((resolve, reject) => { this.promises[payload.id] = { resolve, reject } })\n    this.connection.send(payload)\n    return promise\n  }\n  send (...args) { // Send can be clobbered, proxy sendPromise for backwards compatibility\n    return this._send(...args)\n  }\n  _sendBatch (requests) {\n    return Promise.all(requests.map(payload => this._send(payload.method, payload.params)))\n  }\n  subscribe (type, method, params = []) {\n    return this._send(type, [method, ...params]).then(id => {\n      this.subscriptions.push(id)\n      return id\n    })\n  }\n  unsubscribe (type, id) {\n    return this._send(type, [id]).then(success => {\n      if (success) {\n        this.subscriptions = this.subscriptions.filter(_id => _id !== id) // Remove subscription\n        this.removeAllListeners(id) // Remove listeners\n        return success\n      }\n    })\n  }\n  sendAsync (payload, cb) { // Backwards Compatibility\n    if (!cb || typeof cb !== 'function') return cb(new Error('Invalid or undefined callback provided to sendAsync'))\n    if (!payload) return cb(new Error('Invalid Payload'))\n    // sendAsync can be called with an array for batch requests used by web3.js 0.x\n    // this is not part of EIP-1193's backwards compatibility but we still want to support it\n    if (payload instanceof Array) {\n      return this.sendAsyncBatch(payload, cb)\n    } else {\n      return this._send(payload.method, payload.params).then(result => {\n        cb(null, { id: payload.id, jsonrpc: payload.jsonrpc, result })\n      }).catch(err => {\n        cb(err)\n      })\n    }\n  }\n  sendAsyncBatch (payload, cb) {\n    return this._sendBatch(payload).then((results) => {\n      let result = results.map((entry, index) => {\n        return { id: payload[index].id, jsonrpc: payload[index].jsonrpc, result: entry }\n      })\n      cb(null, result)\n    }).catch(err => {\n      cb(err)\n    })\n  }\n  isConnected () { // Backwards Compatibility\n    return this.connected\n  }\n  close () {\n    this.connection.close()\n    this.connected = false\n    let error = new Error(`Provider closed, subscription lost, please subscribe again.`)\n    this.subscriptions.forEach(id => this.emit(id, error)) // Send Error objects to any open subscriptions\n    this.subscriptions = [] // Clear subscriptions\n  }\n}\n\nmodule.exports = EthereumProvider\n","const EventEmitter = require('events')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nclass ConnectionManager extends EventEmitter {\n  constructor (connections, targets, options) {\n    super()\n    this.targets = targets\n    this.connections = connections\n    this.connected = false\n    this.status = 'loading'\n    this.interval = options.interval || 5000\n    this.name = options.name || 'default'\n    this.inSetup = true\n    this.connect()\n  }\n\n  connect (index = 0) {\n    if (dev && index === 0) console.log(`\\n\\n\\n\\nA connection cycle started for provider with name: ${this.name}`)\n\n    if (this.connection && this.connection.status === 'connected' && index >= this.connection.index) {\n      if (dev) console.log('Stopping connection cycle becasuse we\\'re already connected to a higher priority provider')\n    } else if (this.targets.length === 0) {\n      if (dev) console.log('No valid targets supplied')\n    } else {\n      const { protocol, location } = this.targets[index]\n      this.connection = this.connections[protocol](location)\n\n      this.connection.on('error', err => {\n        if (!this.connected) return this.connectionError(index, err)\n        if (this.listenerCount('error')) return this.emit('error', err)\n        console.warn('eth-provider - Uncaught connection error: ' + err.message)\n      })\n\n      this.connection.on('close', (summary) => {\n        this.connected = false\n        this.emit('close')\n        if (!this.closing) this.refresh()\n      })\n\n      this.connection.on('connect', () => {\n        this.connection.target = this.targets[index]\n        this.connection.index = index\n        this.targets[index].status = this.connection.status\n        this.connected = true\n        this.inSetup = false\n        if (dev) console.log('Successfully connected to: ' + this.targets[index].location)\n        this.emit('connect')\n      })\n\n      this.connection.on('data', data => this.emit('data', data))\n      this.connection.on('payload', payload => this.emit('payload', payload))\n    }\n  }\n\n  refresh (interval = this.interval) {\n    if (dev) console.log(`Reconnect queued for ${(interval / 1000).toFixed(2)}s in the future`)\n    clearTimeout(this.connectTimer)\n    this.connectTimer = setTimeout(() => this.connect(), interval)\n  }\n\n  connectionError (index, err) {\n    this.targets[index].status = err\n    if (this.targets.length - 1 === index) {\n      this.inSetup = false\n      if (dev) console.warn('eth-provider unable to connect to any targets, view connection cycle summary: ', this.targets)\n      this.refresh()\n    } else { // Not last target, move on the next connection option\n      this.connect(++index)\n    }\n  }\n\n  close () {\n    this.closing = true\n    if (this.connection) {\n      this.connection.close() // Let event bubble from here\n    } else {\n      this.emit('close')\n    }\n    clearTimeout(this.connectTimer)\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.inSetup) {\n      setTimeout(() => this.send(payload), 100)\n    } else if (this.connection.closed) {\n      this.error(payload, 'Not connected')\n    } else {\n      this.connection.send(payload)\n    }\n  }\n}\n\nmodule.exports = ConnectionManager\n","const EventEmitter = require('events')\nconst EthereumProvider = require('ethereum-provider')\nconst ConnectionManager = require('../ConnectionManager')\n\nconst monitor = provider => {\n  function update (status) {\n    provider.status = status\n    if (provider instanceof EventEmitter) provider.emit('status', status)\n  }\n  async function check () {\n    if (provider.inSetup) return setTimeout(check, 1000)\n    try {\n      if (await provider.send('eth_syncing')) {\n        update('syncing')\n        setTimeout(() => check(), 5000)\n      } else {\n        update('connected')\n      }\n    } catch (e) {\n      update('disconnected')\n    }\n  }\n  update('loading')\n  check()\n  provider.on('connect', () => check())\n  provider.on('close', () => update('disconnected'))\n  return provider\n}\n\nmodule.exports = (connections, targets, options) => {\n  // If window.ethereum and injected is a target in any priority, return ethereum provider\n  if (connections.injected.__isProvider && targets.map(t => t.type).indexOf('injected') > -1) {\n    delete connections.injected.__isProvider\n    return monitor(connections.injected)\n  }\n  const provider = new EthereumProvider(new ConnectionManager(connections, targets, options))\n  provider.setMaxListeners(128)\n  return monitor(provider)\n}\n","module.exports = {\n  injected: ['injected'],\n  frame: ['ws://127.0.0.1:1248', 'http://127.0.0.1:1248'],\n  direct: ['ws://127.0.0.1:8546', 'http://127.0.0.1:8545'], // IPC paths will be prepended in Node/Electron\n  infura: ['wss://mainnet.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://mainnet.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRopsten: ['wss://ropsten.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://ropsten.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraRinkeby: ['wss://rinkeby.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://rinkeby.infura.io/v3/786ade30f36244469480aa5c2bf0743b'],\n  infuraKovan: ['wss://kovan.infura.io/ws/v3/786ade30f36244469480aa5c2bf0743b', 'https://kovan.infura.io/v3/786ade30f36244469480aa5c2bf0743b']\n}\n","const EventEmitter = require('events')\n\nclass InjectedConnection extends EventEmitter {\n  constructor (_injected, options) {\n    super()\n    if (_injected) {\n      setTimeout(() => this.emit('error', new Error('Injected web3 provider is not currently supported')), 0)\n    } else {\n      setTimeout(() => this.emit('error', new Error('No injected provider found')), 0)\n    }\n  }\n}\n\nmodule.exports = injected => options => new InjectedConnection(injected, options)\n","const EventEmitter = require('events')\n\nclass UnavailableConnection extends EventEmitter {\n  constructor (message) {\n    super()\n    setTimeout(() => this.emit('error', new Error(message)), 0)\n  }\n}\n\nmodule.exports = message => () => new UnavailableConnection(message)\n","let last, timeout\n\nmodule.exports = (res, cb) => {\n  const values = []\n  res\n    .replace(/\\}[\\n\\r]?\\{/g, '}|--|{') // }{\n    .replace(/\\}\\][\\n\\r]?\\[\\{/g, '}]|--|[{') // }][{\n    .replace(/\\}[\\n\\r]?\\[\\{/g, '}|--|[{') // }[{\n    .replace(/\\}\\][\\n\\r]?\\{/g, '}]|--|{') // }]{\n    .split('|--|')\n    .forEach(data => {\n      if (last) data = last + data // prepend the last chunk\n      let result\n      try {\n        result = JSON.parse(data)\n      } catch (e) {\n        last = data\n        clearTimeout(timeout) // restart timeout\n        timeout = setTimeout(() => cb(new Error('Parse response timeout')), 15 * 1000)\n        return\n      }\n      clearTimeout(timeout)\n      last = null\n      if (result) values.push(result)\n    })\n  cb(null, values)\n}\n","const EventEmitter = require('events')\nconst parse = require('../parse')\nconst dev = process.env.NODE_ENV === 'development'\n\nlet WebSocket\n\nclass WebSocketConnection extends EventEmitter {\n  constructor (_WebSocket, url, options) {\n    super()\n    WebSocket = _WebSocket\n    setTimeout(() => this.create(url, options), 0)\n  }\n\n  create (url, options) {\n    if (!WebSocket) this.emit('error', new Error('No WebSocket transport available'))\n    try { this.socket = new WebSocket(url) } catch (e) { return this.emit('error', e) }\n    this.socket.addEventListener('error', err => this.emit('error', err))\n    this.socket.addEventListener('open', () => {\n      this.emit('connect')\n      this.socket.addEventListener('message', message => {\n        const data = typeof message.data === 'string' ? message.data : ''\n        parse(data, (err, payloads) => {\n          if (err) return //\n          payloads.forEach(load => {\n            if (Array.isArray(load)) {\n              load.forEach(payload => this.emit('payload', payload))\n            } else {\n              this.emit('payload', load)\n            }\n          })\n        })\n      })\n      this.socket.addEventListener('close', () => this.onClose())\n    })\n  }\n\n  onClose () {\n    this.socket = null\n    this.closed = true\n    if (dev) console.log('Closing WebSocket connection')\n    this.emit('close')\n    this.removeAllListeners()\n  }\n\n  close () {\n    if (this.socket) {\n      this.socket.close()\n    } else {\n      this.onClose()\n    }\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload) {\n    if (this.socket && this.socket.readyState === this.socket.CONNECTING) {\n      setTimeout(_ => this.send(payload), 10)\n    } else if (!this.socket || this.socket.readyState > 1) {\n      this.connected = false\n      this.error(payload, 'Not connected')\n    } else {\n      this.socket.send(JSON.stringify(payload))\n    }\n  }\n}\n\nmodule.exports = WebSocket => (url, cb) => new WebSocketConnection(WebSocket, url, cb)\n","const EventEmitter = require('events')\nconst uuid = require('uuid/v4')\n\nconst dev = process.env.NODE_ENV === 'development'\n\nlet XHR\n\nclass HTTPConnection extends EventEmitter {\n  constructor (_XHR, url, options) {\n    super()\n    XHR = _XHR\n    this.connected = false\n    this.subscriptions = false\n    this.status = 'loading'\n    this.url = url\n    this.pollId = uuid()\n    setTimeout(() => this.create(), 0)\n  }\n\n  create () {\n    if (!XHR) return this.emit('error', new Error('No HTTP transport available'))\n    this.on('error', () => { if (this.connected) this.close() })\n    this.init()\n  }\n\n  init () {\n    this.send({ jsonrpc: '2.0', method: 'eth_syncing', params: [], id: 1 }, (err, response) => {\n      if (err) return this.emit('error', err)\n      this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId, 'immediate'] }, (err, response) => {\n        if (!err) {\n          this.subscriptions = true\n          this.pollSubscriptions()\n        }\n        this.connected = true\n        this.emit('connect')\n      })\n    })\n  }\n\n  pollSubscriptions () {\n    this.send({ jsonrpc: '2.0', id: 1, method: 'eth_pollSubscriptions', params: [this.pollId] }, (err, result) => {\n      if (err) {\n        this.subscriptionTimeout = setTimeout(() => this.pollSubscriptions(), 10000)\n        return this.emit('error', err)\n      } else {\n        if (!this.closed) this.subscriptionTimeout = this.pollSubscriptions()\n        if (result) {\n          result.map(p => {\n            let parse\n            try { parse = JSON.parse(p) } catch (e) { parse = false }\n            return parse\n          }).filter(n => n).forEach(p => this.emit('payload', p))\n        }\n      }\n    })\n  }\n\n  close () {\n    if (dev) console.log('Closing HTTP connection')\n    this.closed = true\n    this.emit('close')\n    clearTimeout(this.subscriptionTimeout)\n    this.removeAllListeners()\n  }\n\n  filterStatus (res) {\n    if (res.status >= 200 && res.status < 300) return res\n    const error = new Error(res.statusText)\n    error.res = res\n    throw error.message\n  }\n\n  error (payload, message, code = -1) {\n    this.emit('payload', { id: payload.id, jsonrpc: payload.jsonrpc, error: { message, code } })\n  }\n\n  send (payload, internal) {\n    if (this.closed) return this.error(payload, 'Not connected')\n    if (payload.method === 'eth_subscribe') {\n      if (this.subscriptions) {\n        payload.pollId = this.pollId\n      } else {\n        return this.error(payload, 'Subscriptions are not supported by this HTTP endpoint')\n      }\n    }\n    const xhr = new XHR()\n    let responded = false\n    const res = (err, result) => {\n      if (!responded) {\n        xhr.abort()\n        responded = true\n        if (internal) {\n          internal(err, result)\n        } else {\n          const { id, jsonrpc } = payload\n          const load = err ? { id, jsonrpc, error: { message: err.message, code: err.code } } : { id, jsonrpc, result }\n          this.emit('payload', load)\n        }\n      }\n    }\n    xhr.open('POST', this.url, true)\n    xhr.setRequestHeader('Content-Type', 'application/json')\n    xhr.timeout = 60 * 1000\n    xhr.onerror = res\n    xhr.ontimeout = res\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState === 4) {\n        try {\n          const response = JSON.parse(xhr.responseText)\n          res(response.error, response.result)\n        } catch (e) {\n          res(e)\n        }\n      }\n    }\n    xhr.send(JSON.stringify(payload))\n  }\n}\n\nmodule.exports = XHR => (url, options) => new HTTPConnection(XHR, url, options)\n","const resolve = require('./resolve')\nconst provider = require('./provider')\nconst presets = require('./presets')\n\nconst injected = {\n  ethereum: typeof window !== 'undefined' && typeof window.ethereum !== 'undefined' ? window.ethereum : null,\n  web3: typeof window !== 'undefined' && typeof window.web3 !== 'undefined' ? window.web3.currentProvider : null\n}\nconst ws = typeof window !== 'undefined' && typeof window.WebSocket !== 'undefined' ? window.WebSocket : null\nconst XHR = typeof window !== 'undefined' && typeof window.XMLHttpRequest !== 'undefined' ? window.XMLHttpRequest : null\n\nif (injected.ethereum) injected.ethereum.__isProvider = true\n\nconst connections = {\n  injected: injected.ethereum || require('./connections/injected')(injected.web3),\n  ipc: require('./connections/unavailable')('IPC connections are unavliable in the browser'),\n  ws: require('./connections/ws')(ws),\n  http: require('./connections/http')(XHR)\n}\n\nmodule.exports = (targets = ['injected', 'frame'], options = {}) => provider(connections, resolve(targets, presets), options)\n","import { AbstractConnectorArguments, ConnectorUpdate } from '@web3-react/types'\nimport { AbstractConnector } from '@web3-react/abstract-connector'\nimport ethProvider from 'eth-provider'\nimport invariant from 'tiny-invariant'\n\nexport class UserRejectedRequestError extends Error {\n  public constructor() {\n    super()\n    this.name = this.constructor.name\n    this.message = 'The user rejected the request.'\n  }\n}\n\nexport class FrameConnector extends AbstractConnector {\n  private provider: any\n\n  constructor(kwargs: Required<AbstractConnectorArguments>) {\n    invariant(kwargs.supportedChainIds.length === 1, 'This connector only supports 1 chainId at the moment.')\n    super(kwargs)\n\n    this.handleNetworkChanged = this.handleNetworkChanged.bind(this)\n    this.handleChainChanged = this.handleChainChanged.bind(this)\n    this.handleAccountsChanged = this.handleAccountsChanged.bind(this)\n    this.handleClose = this.handleClose.bind(this)\n  }\n\n  private handleNetworkChanged(networkId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'networkChanged' event with payload\", networkId)\n    }\n    this.emitUpdate({ provider: this.provider, chainId: networkId })\n  }\n\n  private handleChainChanged(chainId: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'chainChanged' event with payload\", chainId)\n    }\n    this.emitUpdate({ chainId })\n  }\n\n  private handleAccountsChanged(accounts: string[]): void {\n    if (__DEV__) {\n      console.log(\"Handling 'accountsChanged' event with payload\", accounts)\n    }\n    this.emitUpdate({ account: accounts.length === 0 ? null : accounts[0] })\n  }\n\n  private handleClose(code: number, reason: string): void {\n    if (__DEV__) {\n      console.log(\"Handling 'close' event with payload\", code, reason)\n    }\n    this.emitDeactivate()\n  }\n\n  public async activate(): Promise<ConnectorUpdate> {\n    if (!this.provider) {\n      this.provider = ethProvider('frame')\n    }\n\n    this.provider\n      .on('networkChanged', this.handleNetworkChanged)\n      .on('chainChanged', this.handleChainChanged)\n      .on('accountsChanged', this.handleAccountsChanged)\n      .on('close', this.handleClose)\n\n    const account = await this.provider\n      .enable()\n      .then((accounts: string[]): string => accounts[0])\n      .catch((error: Error): void => {\n        if (error && (error as any).code === 4001) {\n          throw new UserRejectedRequestError()\n        } else {\n          throw error\n        }\n      })\n\n    return { provider: this.provider, account }\n  }\n\n  public async getProvider(): Promise<any> {\n    return this.provider\n  }\n\n  public async getChainId(): Promise<number> {\n    return this.provider.send('eth_chainId')\n  }\n\n  public async getAccount(): Promise<null> {\n    return this.provider.send('eth_accounts').then((accounts: string[]): string => accounts[0])\n  }\n\n  public deactivate() {\n    this.provider\n      .removeListener('networkChanged', this.handleNetworkChanged)\n      .removeListener('chainChanged', this.handleChainChanged)\n      .removeListener('accountsChanged', this.handleAccountsChanged)\n      .removeListener('close', this.handleClose)\n  }\n}\n"]}